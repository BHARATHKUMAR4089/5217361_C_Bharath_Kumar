#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int* matchingStrings(char **strings, int stringsCount, char **queries, int queriesCount) {
    int *result = (int *)calloc(queriesCount, sizeof(int));
    if (!result) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(1);
    }

    for (int i = 0; i < queriesCount; i++) {
        int count = 0;
        for (int j = 0; j < stringsCount; j++) {
            if (strcmp(strings[j], queries[i]) == 0) {
                count++;
            }
        }
        result[i] = count;
    }
    return result;
}

int main() {
    int stringsCount;
    scanf("%d", &stringsCount);
    getchar(); 

    char **strings = (char **)malloc(stringsCount * sizeof(char *));
    char buffer[1024];
    for (int i = 0; i < stringsCount; i++) {
        fgets(buffer, sizeof(buffer), stdin);
        buffer[strcspn(buffer, "\n")] = '\0';
        strings[i] = strdup(buffer);
    }

    int queriesCount;
    scanf("%d", &queriesCount);
    getchar(); 


    char **queries = (char **)malloc(queriesCount * sizeof(char *));
    for (int i = 0; i < queriesCount; i++) {
        fgets(buffer, sizeof(buffer), stdin);
        buffer[strcspn(buffer, "\n")] = '\0';
        queries[i] = strdup(buffer);
    }

   
    int *res = matchingStrings(strings, stringsCount, queries, queriesCount);


    for (int i = 0; i < queriesCount; i++) {
        printf("%d\n", res[i]);
    }

    for (int i = 0; i < stringsCount; i++) free(strings[i]);
    for (int i = 0; i < queriesCount; i++) free(queries[i]);
    free(strings);
    free(queries);
    free(res);

    return 0;
}
